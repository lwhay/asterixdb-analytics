/*
 * Copyright 2009-2013 by The Regents of the University of California
 * Licensed under the Apache License, Version 2.0 (the !License!);
 * you may not use this file except in compliance with the License.
 * you may obtain a copy of the License from
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an !AS IS! BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package edu.uci.ics.external.connector.asterixdb;

import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Map;

import junit.extensions.PA;
import junit.framework.Assert;

import org.json.JSONObject;
import org.junit.Test;
import org.mortbay.util.SingletonList;

import org.apache.asterix.om.types.ARecordType;
import org.apache.asterix.om.types.ATypeTag;
import edu.uci.ics.external.connector.asterixdb.api.FilePartition;

public class ConnectorUtilsTest {

    private static String RESPONSE1 = "{!temp!:true,!keys!:!DataverseName,DatasetName!,!splits!:[{!path!:!/var/folders/lg/894v7vls0td_nyh4l9l1_vwh0000gn/T/nc1/iodevice0/nc1data/Metadata/Dataset_idx_Dataset!,!ioDeviceId!:0,!ip!:!127.0.0.1!}],!type!:{!open!:true,!name!:!DatasetRecordType!,!type!:!org.apache.asterix.om.types.ARecordType!,!fields!:[{!DataverseName!:{!type!:!AString!}},{!DatasetName!:{!type!:!AString!}},{!DataTypeName!:{!type!:!AString!}},{!DatasetType!:{!type!:!AString!}},{!InternalDetails!:{!type!:!org.apache.asterix.om.types.AUnionType!,!fields!:[{!type!:!ANULL!},{!open!:true,!name!:!Type_#1_UnionType_Field_InternalDetails_in_DatasetRecordType!,!type!:!org.apache.asterix.om.types.ARecordType!,!fields!:[{!FileStructure!:{!type!:!AString!}},{!PartitioningStrategy!:{!type!:!AString!}},{!PartitioningKey!:{!item-type!:{!item-type!:{!type!:!AString!},!type!:!org.apache.asterix.om.types.AOrderedListType!},!type!:!org.apache.asterix.om.types.AOrderedListType!}},{!PrimaryKey!:{!item-type!:{!item-type!:{!type!:!AString!},!type!:!org.apache.asterix.om.types.AOrderedListType!},!type!:!org.apache.asterix.om.types.AOrderedListType!}},{!GroupName!:{!type!:!AString!}},{!Autogenerated!:{!type!:!ABoolean!}},{!CompactionPolicy!:{!type!:!AString!}},{!CompactionPolicyProperties!:{!item-type!:{!open!:true,!name!:!Field_CompactionPolicyProperties_in_Type_#1_UnionType_Field_InternalDetails_in_DatasetRecordType_ItemType!,!type!:!org.apache.asterix.om.types.ARecordType!,!fields!:[{!Name!:{!type!:!AString!}},{!Value!:{!type!:!AString!}}]},!type!:!org.apache.asterix.om.types.AOrderedListType!}}]}]}},{!ExternalDetails!:{!type!:!org.apache.asterix.om.types.AUnionType!,!fields!:[{!type!:!ANULL!},{!open!:true,!name!:!Type_#1_UnionType_Field_ExternalDetails_in_DatasetRecordType!,!type!:!org.apache.asterix.om.types.ARecordType!,!fields!:[{!DatasourceAdapter!:{!type!:!AString!}},{!Properties!:{!item-type!:{!open!:true,!name!:!Field_Properties_in_Type_#1_UnionType_Field_ExternalDetails_in_DatasetRecordType_ItemType!,!type!:!org.apache.asterix.om.types.ARecordType!,!fields!:[{!Name!:{!type!:!AString!}},{!Value!:{!type!:!AString!}}]},!type!:!org.apache.asterix.om.types.AOrderedListType!}},{!GroupName!:{!type!:!AString!}},{!LastRefreshTime!:{!type!:!ADateTime!}},{!TransactionState!:{!type!:!AInt32!}},{!CompactionPolicy!:{!type!:!AString!}},{!CompactionPolicyProperties!:{!item-type!:{!open!:true,!name!:!Field_CompactionPolicyProperties_in_Type_#1_UnionType_Field_InternalDetails_in_DatasetRecordType_ItemType!,!type!:!org.apache.asterix.om.types.ARecordType!,!fields!:[{!Name!:{!type!:!AString!}},{!Value!:{!type!:!AString!}}]},!type!:!org.apache.asterix.om.types.AOrderedListType!}}]}]}},{!Hints!:{!item-type!:{!open!:true,!name!:!Field_Hints_in_DatasetRecordType_ItemType!,!type!:!org.apache.asterix.om.types.ARecordType!,!fields!:[{!Name!:{!type!:!AString!}},{!Value!:{!type!:!AString!}}]},!type!:!org.apache.asterix.om.types.AUnorderedListType!}},{!Timestamp!:{!type!:!AString!}},{!DatasetId!:{!type!:!AInt32!}},{!PendingOp!:{!type!:!AInt32!}}]}}";
    private static String RESPONSE = RESPONSE1.replace('!', '\"');

    @SuppressWarnings("unchecked")
    @Test
    public void test() throws Exception {
        JSONObject response = new JSONObject(RESPONSE);

        ARecordType recordType = (ARecordType) PA.invokeMethod(ConnectorUtils.class,
                "extractRecordType(org.json.JSONObject)", response);
        Assert.assertEquals(ATypeTag.STRING, recordType.getFieldType("DataverseName").getTypeTag());
        Assert.assertEquals(ATypeTag.STRING, recordType.getFieldType("DatasetName").getTypeTag());

        boolean temp = (Boolean) PA
                .invokeMethod(ConnectorUtils.class, "extractTempInfo(org.json.JSONObject)", response);
        Assert.assertTrue(temp);

        List<FilePartition> partitions = (List<FilePartition>) PA.invokeMethod(ConnectorUtils.class,
                "extractFilePartitions(org.json.JSONObject)", response);
        Assert.assertTrue(partitions.get(0).getPath().toString().endsWith("Metadata/Dataset_idx_Dataset"));

        Map<String, List<String>> mockMapping = mock(Map.class);
        when(mockMapping.get(anyString())).thenReturn(SingletonList.newSingletonList("nc1"));
        String[] locations = (String[]) PA.invokeMethod(ConnectorUtils.class,
                "getScanLocationConstraints(java.util.List," + "java.util.Map)", partitions, mockMapping);
        Assert.assertEquals(locations[0], "nc1");
    }
}
